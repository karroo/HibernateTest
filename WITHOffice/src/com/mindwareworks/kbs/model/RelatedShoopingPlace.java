package com.mindwareworks.kbs.model;

// default package
// Generated 2012. 3. 2 오후 8:12:59 by Hibernate Tools 3.2.0.beta8

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

import org.hibernate.annotations.FetchMode;

/**
 * RelatedShoopingPlace generated by hbm2java
 */
@Embeddable
public class RelatedShoopingPlace implements java.io.Serializable {

	// Fields

	
	private ShootingPlace shootingPlace;
	private Integer startTime;
	private Integer endTime;

	// Constructors

	/** default constructor */
	public RelatedShoopingPlace() {
	}

	
	/** full constructor */
	public RelatedShoopingPlace(
			ShootingPlace shootingPlace, Integer startTime, Integer endTime) {
		this.shootingPlace = shootingPlace;
		this.startTime = startTime;
		this.endTime = endTime;
	}

	

	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "PLACE_ID", unique = false, nullable = false, insertable = false, updatable = false)
	@org.hibernate.annotations.Fetch(FetchMode.JOIN)
	public ShootingPlace getShootingPlace() {
		return this.shootingPlace;
	}

	public void setShootingPlace(ShootingPlace shootingPlace) {
		this.shootingPlace = shootingPlace;
	}

	@Column(name = "START_TIME", unique = false, nullable = true, insertable = true, updatable = true, precision = 0)
	public Integer getStartTime() {
		return this.startTime;
	}

	public void setStartTime(Integer startTime) {
		this.startTime = startTime;
	}

	@Column(name = "END_TIME", unique = false, nullable = true, insertable = true, updatable = true, precision = 0)
	public Integer getEndTime() {
		return this.endTime;
	}

	public void setEndTime(Integer endTime) {
		this.endTime = endTime;
	}
	
	public boolean equals(java.lang.Object object){
		if(object == null || !( object instanceof RelatedShoopingPlace)){
			return false;
		}
		
		RelatedShoopingPlace place = (RelatedShoopingPlace)object;
		return place.getShootingPlace().equals(shootingPlace) && 
				place.getStartTime().equals(startTime) &&
				place.getEndTime().equals(endTime);
	}
	
	public int hashCode(){
		return startTime.hashCode() | endTime.hashCode() | shootingPlace.hashCode(); 
	}
	
}
